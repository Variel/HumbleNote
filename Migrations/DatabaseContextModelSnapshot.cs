// <auto-generated />
using System;
using HumbleNote.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HumbleNote.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("HumbleNote.Persistence.Models.HashTag", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(26)
                        .HasColumnType("TEXT");

                    b.Property<string>("TagValue")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastUsedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "TagValue");

                    b.HasIndex("UserId", "LastUsedAt", "TagValue")
                        .IsDescending();

                    b.ToTable("HashTags");
                });

            modelBuilder.Entity("HumbleNote.Persistence.Models.HashTagIndex", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(26)
                        .HasColumnType("TEXT");

                    b.Property<string>("HashTag")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("NoteId")
                        .HasMaxLength(26)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "HashTag", "NoteId");

                    b.HasIndex("NoteId");

                    b.HasIndex("UserId", "HashTag", "Timestamp")
                        .IsDescending();

                    b.ToTable("HashTagIndices");
                });

            modelBuilder.Entity("HumbleNote.Persistence.Models.Note", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastActivatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("NewVersionNoteId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("TEXT");

                    b.Property<string>("OldVersionNoteId")
                        .HasMaxLength(26)
                        .HasColumnType("TEXT");

                    b.Property<string>("ParentNoteId")
                        .HasMaxLength(26)
                        .HasColumnType("TEXT");

                    b.Property<string>("RootNoteId")
                        .HasMaxLength(26)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(26)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OldVersionNoteId")
                        .IsUnique();

                    b.HasIndex("ParentNoteId");

                    b.HasIndex("RootNoteId");

                    b.HasIndex("UserId", "Id")
                        .IsUnique()
                        .IsDescending();

                    b.HasIndex("UserId", "LastActivatedAt")
                        .IsDescending();

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("HumbleNote.Persistence.Models.NoteMention", b =>
                {
                    b.Property<string>("NoteId")
                        .HasMaxLength(26)
                        .HasColumnType("TEXT");

                    b.Property<string>("MentionedNoteId")
                        .HasMaxLength(26)
                        .HasColumnType("TEXT");

                    b.HasKey("NoteId", "MentionedNoteId");

                    b.HasIndex("MentionedNoteId");

                    b.ToTable("NoteMentions");
                });

            modelBuilder.Entity("HumbleNote.Persistence.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(26)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "01GJW6GWN7C203G5XFZTWK257Z",
                            Name = "예차니",
                            UserName = "yechanism"
                        });
                });

            modelBuilder.Entity("HumbleNote.Persistence.Models.HashTagIndex", b =>
                {
                    b.HasOne("HumbleNote.Persistence.Models.Note", "Note")
                        .WithMany()
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");
                });

            modelBuilder.Entity("HumbleNote.Persistence.Models.Note", b =>
                {
                    b.HasOne("HumbleNote.Persistence.Models.Note", "OldVersionNote")
                        .WithOne("NewVersionNote")
                        .HasForeignKey("HumbleNote.Persistence.Models.Note", "OldVersionNoteId")
                        .HasPrincipalKey("HumbleNote.Persistence.Models.Note", "NewVersionNoteId");

                    b.HasOne("HumbleNote.Persistence.Models.Note", "ParentNote")
                        .WithMany("ChildrenNotes")
                        .HasForeignKey("ParentNoteId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HumbleNote.Persistence.Models.Note", "RootNote")
                        .WithMany()
                        .HasForeignKey("RootNoteId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HumbleNote.Persistence.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OldVersionNote");

                    b.Navigation("ParentNote");

                    b.Navigation("RootNote");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HumbleNote.Persistence.Models.NoteMention", b =>
                {
                    b.HasOne("HumbleNote.Persistence.Models.Note", "MentionedNote")
                        .WithMany("NoteMentionBackLinks")
                        .HasForeignKey("MentionedNoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HumbleNote.Persistence.Models.Note", "Note")
                        .WithMany("NoteMentions")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MentionedNote");

                    b.Navigation("Note");
                });

            modelBuilder.Entity("HumbleNote.Persistence.Models.Note", b =>
                {
                    b.Navigation("ChildrenNotes");

                    b.Navigation("NewVersionNote");

                    b.Navigation("NoteMentionBackLinks");

                    b.Navigation("NoteMentions");
                });
#pragma warning restore 612, 618
        }
    }
}
